#!/usr/bin/env python3
"""
Script de setup para configurar o ambiente do projeto
"""

import subprocess
import sys
import os
import platform

def run_command(command, description):
    """Executa um comando e exibe o resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}: {e}")
        print(f"Sa√≠da de erro: {e.stderr}")
        return False

def check_python_version():
    """Verifica a vers√£o do Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        return False
    
    print("‚úÖ Vers√£o do Python compat√≠vel!")
    return True

def create_virtual_environment():
    """Cria ambiente virtual"""
    if os.path.exists("pneumonia_env"):
        print("‚úÖ Ambiente virtual j√° existe!")
        return True
    
    print("üîÑ Criando ambiente virtual...")
    
    if platform.system() == "Windows":
        command = "python -m venv pneumonia_env"
    else:
        command = "python3 -m venv pneumonia_env"
    
    return run_command(command, "Cria√ß√£o do ambiente virtual")

def activate_virtual_environment():
    """Ativa o ambiente virtual"""
    if platform.system() == "Windows":
        activate_script = "pneumonia_env\\Scripts\\activate"
    else:
        activate_script = "source pneumonia_env/bin/activate"
    
    print(f"\nüîß Para ativar o ambiente virtual, execute:")
    print(f"   {activate_script}")
    
    if platform.system() != "Windows":
        print("\nüîß Ou use:")
        print("   source pneumonia_env/bin/activate")

def install_requirements():
    """Instala as depend√™ncias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Verificar se o ambiente virtual est√° ativo
    if "VIRTUAL_ENV" not in os.environ:
        print("‚ö†Ô∏è  Ambiente virtual n√£o est√° ativo!")
        print("   Ative o ambiente virtual primeiro:")
        if platform.system() == "Windows":
            print("   pneumonia_env\\Scripts\\activate")
        else:
            print("   source pneumonia_env/bin/activate")
        return False
    
    return run_command("pip install -r requirements.txt", "Instala√ß√£o das depend√™ncias")

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ["models", "data", "utils"]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ Diret√≥rio '{directory}' criado")
        else:
            print(f"‚úÖ Diret√≥rio '{directory}' j√° existe")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Setup do Projeto de Classifica√ß√£o de Pneumonia")
    print("=" * 50)
    
    # Verificar vers√£o do Python
    if not check_python_version():
        sys.exit(1)
    
    # Criar diret√≥rios
    create_directories()
    
    # Criar ambiente virtual
    if not create_virtual_environment():
        print("‚ùå Falha ao criar ambiente virtual!")
        sys.exit(1)
    
    # Instru√ß√µes de ativa√ß√£o
    activate_virtual_environment()
    
    print("\n" + "=" * 50)
    print("üéâ Setup conclu√≠do!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Ative o ambiente virtual:")
    if platform.system() == "Windows":
        print("   pneumonia_env\\Scripts\\activate")
    else:
        print("   source pneumonia_env/bin/activate")
    
    print("2. Instale as depend√™ncias:")
    print("   pip install -r requirements.txt")
    
    print("3. Treine o modelo:")
    print("   python train.py")
    
    print("4. Execute o app:")
    print("   streamlit run app.py")
    
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")

if __name__ == "__main__":
    main() 