#!/usr/bin/env python3
"""
Script de instala√ß√£o inteligente para o projeto de classifica√ß√£o de pneumonia
"""

import os
import sys
import subprocess
import platform
import shutil

def check_python_version():
    """Verifica a vers√£o do Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        return False
    
    print("‚úÖ Vers√£o do Python compat√≠vel!")
    return True

def check_system_info():
    """Verifica informa√ß√µes do sistema"""
    print(f"üíª Sistema: {platform.system()} {platform.release()}")
    print(f"üèóÔ∏è  Arquitetura: {platform.machine()}")
    
    # Verificar mem√≥ria dispon√≠vel
    try:
        import psutil
        memory = psutil.virtual_memory()
        print(f"üíæ RAM: {memory.total // (1024**3):.1f} GB total, {memory.available // (1024**3):.1f} GB dispon√≠vel")
        
        if memory.total < 4 * (1024**3):  # Menos de 4GB
            print("‚ö†Ô∏è  RAM baixa detectada. Use requirements-minimal.txt")
            return "minimal"
        elif memory.total < 8 * (1024**3):  # Menos de 8GB
            print("‚ö†Ô∏è  RAM moderada. Use requirements-prod.txt")
            return "production"
        else:
            print("‚úÖ RAM suficiente para instala√ß√£o completa")
            return "full"
    except ImportError:
        print("‚ÑπÔ∏è  psutil n√£o dispon√≠vel. Assumindo RAM suficiente.")
        return "full"

def check_gpu():
    """Verifica se h√° GPU dispon√≠vel"""
    try:
        import tensorflow as tf
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            print(f"üöÄ GPU detectada: {len(gpus)} dispositivo(s)")
            return True
        else:
            print("üíª Nenhuma GPU detectada - usando CPU")
            return False
    except ImportError:
        print("‚ÑπÔ∏è  TensorFlow n√£o instalado ainda")
        return False

def select_requirements_file(system_type, has_gpu):
    """Seleciona o arquivo de requirements apropriado"""
    if system_type == "minimal":
        return "requirements-minimal.txt"
    elif system_type == "production":
        return "requirements-prod.txt"
    else:
        if has_gpu:
            return "requirements.txt"  # Vers√£o completa com suporte GPU
        else:
            return "requirements-prod.txt"  # Vers√£o est√°vel para CPU

def install_requirements(requirements_file):
    """Instala as depend√™ncias do arquivo selecionado"""
    print(f"\nüì¶ Instalando depend√™ncias de {requirements_file}...")
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", requirements_file
        ], check=True, capture_output=True, text=True)
        
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o: {e}")
        print(f"Sa√≠da de erro: {e.stderr}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ["models", "data", "utils"]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ Diret√≥rio '{directory}' criado")
        else:
            print(f"‚úÖ Diret√≥rio '{directory}' j√° existe")

def test_installation():
    """Testa se a instala√ß√£o foi bem-sucedida"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        # Testar imports b√°sicos
        import numpy as np
        print("‚úÖ NumPy - OK")
        
        import tensorflow as tf
        print(f"‚úÖ TensorFlow {tf.__version__} - OK")
        
        import streamlit as st
        print(f"‚úÖ Streamlit {st.__version__} - OK")
        
        from medmnist import INFO
        print("‚úÖ MedMNIST - OK")
        
        print("üéâ Todos os m√≥dulos principais funcionando!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de import: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Instala√ß√£o Inteligente do Projeto de Classifica√ß√£o de Pneumonia")
    print("=" * 70)
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Verificar sistema
    system_type = check_system_info()
    has_gpu = check_gpu()
    
    # Selecionar requirements
    requirements_file = select_requirements_file(system_type, has_gpu)
    print(f"\nüìã Arquivo selecionado: {requirements_file}")
    
    # Criar diret√≥rios
    create_directories()
    
    # Instalar depend√™ncias
    if not install_requirements(requirements_file):
        print("‚ùå Falha na instala√ß√£o das depend√™ncias!")
        sys.exit(1)
    
    # Testar instala√ß√£o
    if not test_installation():
        print("‚ùå Falha no teste da instala√ß√£o!")
        sys.exit(1)
    
    print("\n" + "=" * 70)
    print("üéâ Instala√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Treinar o modelo: python train.py")
    print("2. Executar o app: streamlit run app.py")
    print("3. Testar o sistema: python quick_test.py")
    
    print(f"\nüí° Dica: Use '{requirements_file}' para reinstalar depend√™ncias espec√≠ficas")

if __name__ == "__main__":
    main()
